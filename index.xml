<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Service Catalog Tools Intro Workshop on Service Catalog Tools Workshop</title>
    <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/</link>
    <description>Recent content in AWS Service Catalog Tools Intro Workshop on Service Catalog Tools Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://aws-samples.github.io/aws-service-catalog-tools-workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CloudFormation/CodeBuild</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/10-using-cfn-and-codebuild.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/10-using-cfn-and-codebuild.html</guid>
      <description>What are we going to do? You will need to bootstrap spoke accounts so you can configure them using the Service Catalog Tools.
Bootstrapping a spoke account will create an AWS CloudFormation stack in it. This stack will contain the Puppet IAM Role (PuppetRole) which is needed by framework to perform actions in the spoke account.
The following steps should be executed using the provided AWS CloudFormation templates and AWS CodeBuild projects which are linked to here or available in the home region of your puppet hub account.</description>
    </item>
    
    <item>
      <title>Starter framework</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/design-considerations/multi-account-strategy/starter-framework.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/design-considerations/multi-account-strategy/starter-framework.html</guid>
      <description>What are we going to do? This article will explain the starter multi-account framework
Starter framework Within your AWS Organization there are two types of Organizational Units (OUs) - foundational and additional.
The Foundational OUs group the shared accounts needed to manage the your overall AWS environment. The areas considered foundational are security, networking and logs. Each of the AWS Accounts within the foundational OUs are grouped into production and non-production environments in order to clearly distinguish between production and non production policies.</description>
    </item>
    
    <item>
      <title>Using AWS Organizations</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/10-using-aws-organizations.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/10-using-aws-organizations.html</guid>
      <description>You can use Service Catalog Puppet with AWS Organizations. Using it will allow you describe all accounts within an organizational unit as a single entity. This provides a quicker way to get started and an easier way of managing multiple account environments. You can also use AWS Service Catalog&#39;s support for AWS Organizations delegated administrator to reduce the number of invites and accepts for portfolio sharing.
What are we going to do?</description>
    </item>
    
    <item>
      <title>Using AWS Service Catalog</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/300-provisioning-subnets/15-using-service-catalog.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/300-provisioning-subnets/15-using-service-catalog.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Define a product with a version and a portfolio Add the source code for our product Provision the product subnet into a spoke account  Step by step guide Here are the steps you need to follow to &amp;ldquo;Using AWS Service Catalog&amp;rdquo;
Define a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repository</description>
    </item>
    
    <item>
      <title>Using AWS Service Catalog</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/400-self-service/15-using-service-catalog.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/400-self-service/15-using-service-catalog.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Create a portfolio for sharing products Share the portfolio networking-optional into a spoke account  Step by step guide Here are the steps you need to follow to &amp;ldquo;Using AWS Service Catalog&amp;rdquo;
Create a portfolio for sharing products   Navigate to the ServiceCatalogFactory CodeCommit repository
  Click on portfolios, then networking.yaml and click &amp;ldquo;Edit&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Creating the Lambda</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/20-creating-the-lambda.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/20-creating-the-lambda.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Define a stack Add the source code for our product  The hub AWS Account is the source of truth for our stacks. Spoke AWS accounts are consumers of these stacks, you can think of them as accounts that need governance controls applied. For this workshop, we are using the same account as both the hub and spoke for simplicity; in a multi-account setup, these could be separate AWS Accounts and Regions.</description>
    </item>
    
    <item>
      <title>Service Catalog Factory</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/10-prerequisites/100-installation/20-service-catalog-factory.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/10-prerequisites/100-installation/20-service-catalog-factory.html</guid>
      <description>Select the pre-configured CloudFormation Template Service Catalog Factory can be installed via a pre-created AWS CloudFormation template stored in Amazon S3. There are many configuration options for you to customise your installation. For this workshop we will be using the following quick link which has the settings already preconfigured for you:
 Create the initialisation stack Check the box labeled &amp;ldquo;I acknowledge that AWS CloudFormation might create IAM resources with custom names.</description>
    </item>
    
    <item>
      <title>Service Catalog Factory</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/20-service-catalog-factory.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/20-service-catalog-factory.html</guid>
      <description>Create a new AWS CloudFormation stack  Select the AWS CloudFormation Service.    If you are installing Service Catalog Puppet it will need to be installed into the same account as Service Catalog Factory.
  Select &amp;lsquo;Create Stack&amp;rsquo;  Service Catalog Factory can be installed via a pre-created AWS CloudFormation template stored in Amazon S3 under the following URL:
 https://service-catalog-tools.s3.eu-west-2.amazonaws.com/factory/latest/servicecatalog-factory-initialiser.template.yaml
  Paste this URL under &amp;lsquo;Amazon S3 URL&amp;rsquo;: Hit Next  Specify Stack details  Specify the Stack details as follows:  Stack Name: factory-initialization-stack    You should fill in the details depending on which source code management system you want to use:</description>
    </item>
    
    <item>
      <title>Service Catalog Factory</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/upgrading/service-catalog-factory.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/upgrading/service-catalog-factory.html</guid>
      <description>Before you update This guide applies to all users who installed using the AWS CloudFormation template. If you did not install using the template then you need to follow the install guide. When following the install guide, ensure you provision the initialiser stack into the same region you installed the tools using the CLI method. Installing this way will perform an update and will not break your install.
If you have added any regions since your initial install or modified any settings provided by the parameters in the install template ensure you specify the values you want for them as the install process will overwrite any previous settings you configured in your existing install.</description>
    </item>
    
    <item>
      <title>Using Terraform</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/300-provisioning-subnets/20-using-terraform.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/300-provisioning-subnets/20-using-terraform.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Define a workspace Add the source code for our product Update the manifest file  Step by step guide Here are the steps you need to follow to &amp;ldquo;Using Terraform&amp;rdquo;
Define a workspace   Navigate to the ServiceCatalogFactory CodeCommit repository
  Open the Add file menu and click the Create file button</description>
    </item>
    
    <item>
      <title>Creating the Stack</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/200-provisioning-a-vpc/20-creating-the-stack.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/200-provisioning-a-vpc/20-creating-the-stack.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Define a stack Add the source code for our product  Step by step guide Here are the steps you need to follow to &amp;ldquo;Creating the Stack&amp;rdquo;
Define a stack   Navigate to the ServiceCatalogFactory CodeCommit repository
  Click on stacks
  Click on network-workshop.yaml
  Click on edit
  Append the following snippet to the main input field:</description>
    </item>
    
    <item>
      <title>Deploying the Lambda</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/30-deploying-the-lambda.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/30-deploying-the-lambda.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Create a manifest file with our account in it Provision the stack delete-default-networking-function into a spoke account  Step by step guide Here are the steps you need to follow to provision the stack.
Create a manifest file with our account in it   Navigate to the ServiceCatalogPuppet CodeCommit repository
  Scroll down to the bottom of the page and hit the Create file button</description>
    </item>
    
    <item>
      <title>Installing Puppet</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/30-installing-puppet.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/30-installing-puppet.html</guid>
      <description>Navigate to CloudFormation  Select the AWS CloudFormation service.    Create a new AWS CloudFormation stack  Select &amp;lsquo;Create Stack&amp;rsquo;    Note you must have installed factory into this account already. If you have not done this already navigate to &amp;lsquo;Install Factory Process&amp;rsquo;
 Select the pre-configured AWS CloudFormation template Service Catalog Puppet can be installed via a pre-created AWS CloudFormation template stored in Amazon S3 under the following URL:</description>
    </item>
    
    <item>
      <title>Provisioning the Stack</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/200-provisioning-a-vpc/30-provisioning-the-stack.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/200-provisioning-a-vpc/30-provisioning-the-stack.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Update the manifest file  Step by step guide Here are the steps you need to follow to provision the stack.
Update the manifest file   Navigate to the ServiceCatalogPuppet CodeCommit repository again
  Click on manifest.yaml
  Click Edit
  Append the following snippet to the end of the stacks section in the input field:</description>
    </item>
    
    <item>
      <title>Service Catalog Puppet</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/10-prerequisites/100-installation/30-service-catalog-puppet.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/10-prerequisites/100-installation/30-service-catalog-puppet.html</guid>
      <description>Select the pre-configured AWS CloudFormation template Service Catalog Factory can be installed via a pre-created AWS CloudFormation template stored in Amazon S3. There are many configuration options for you to customise your installation. For this workshop we will be using the following quick link which has the settings already preconfigured for you:
 Create stack Check the box labeled &amp;ldquo;I acknowledge that AWS CloudFormation might create IAM resources with custom names.</description>
    </item>
    
    <item>
      <title>Service Catalog Puppet</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/upgrading/service-catalog-puppet.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/upgrading/service-catalog-puppet.html</guid>
      <description>Before you update This guide applies to all users who installed using the AWS CloudFormation template. If you did not install using the template then you need to follow the install guide. When following the install guide, ensure you provision the initialiser stack into the same region you installed the tools using the CLI method. Installing this way will perform an update and will not break your install.
If you have added any regions since your initial install or modified any settings provided by the parameters in the install template ensure you specify the values you want for them as the install process will overwrite any previous settings you configured in your existing install.</description>
    </item>
    
    <item>
      <title>Invoking the Lambda</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/40-invoking-the-lambda.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/40-invoking-the-lambda.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Invoke the lambda  Step by step guide Here are the steps you need to follow to &amp;ldquo;Invoking the Lambda&amp;rdquo;
Invoke the lambda   Navigate to the ServiceCatalogPuppet CodeCommit repository again
  Click on manifest.yaml
  Click Edit
  Append the following snippet to the end of the main input field:</description>
    </item>
    
    <item>
      <title>Asserting the resources are removed</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/50-asserting-the-resources-are-removed.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/2021-workshop/100-removing-the-default-networking/50-asserting-the-resources-are-removed.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Define an assertion  Step by step guide Here are the steps you need to follow to &amp;ldquo;Asserting the resources are removed&amp;rdquo;
Define an assertion   Navigate to the ServiceCatalogPuppet CodeCommit repository again
  Click on manifest.yaml
  Click Edit
  Append the following snippet to the end of the main input field:</description>
    </item>
    
    <item>
      <title>Command Line Interface</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/50-using-the-cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/50-using-the-cli.html</guid>
      <description>What are we going to do? You will need to bootstrap spoke accounts so you can configure them using the Service Catalog Tools.
Bootstrapping a spoke account will create an AWS CloudFormation stack in it. This stack will contain the Puppet IAM Role (PuppetRole) which is needed by framework to perform actions in the spoke account.
The following steps should be executed using the Service Catalog Puppet CLI which is an application built using Python 3.</description>
    </item>
    
    <item>
      <title>Restricting Spokes</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/80-restricting-spokes.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/50-bootstrapping/80-restricting-spokes.html</guid>
      <description>Restricting spokes The PuppetRole created by the framework has the AdministratorAccess IAM managed policy attached to it. It is reccommended that you can define an IAM Permission Boundary for the PuppetRole for any production applications of this framework.
The IAM Permission Boundary you provide should permit the PuppetRole to interact with AWS Service Catalog to accept shares, manage portfolios and to add, provision and terminate products. In addition the IAM Role should allow the use of AWS SNS, AWS EventBridge, AWS OpsCenter if you are making use of those features.</description>
    </item>
    
    <item>
      <title>Create the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/100-create-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/100-create-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 define a product with a version and a portfolio in a hub account add the source code for the product provision that product into a spoke account  The hub AWS Account is the source of truth for our AWS Service Catalog products. Spoke AWS accounts are consumers of these products, you can think of them as accounts that need governance controls applied.</description>
    </item>
    
    <item>
      <title>Create the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/100-create-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/100-create-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 define another product with a version and add it to the existing cloud-engineering-governance portfolio add the source code for our product provision that product into a spoke account  Step by step guide Here are the steps you need to follow to &amp;ldquo;Create the control&amp;rdquo;
Define a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repository again</description>
    </item>
    
    <item>
      <title>Define the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/100-define-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/100-define-the-product.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 create a portfolio file define a product define a version for our product commit our portfolio file verify the framework has create an AWS CodePipeline for our product version  Step by step guide Here are the steps you need to follow to &amp;ldquo;Define the product&amp;rdquo;
Create the portfolio file We need to tell the framework that a product exists.</description>
    </item>
    
    <item>
      <title>Disabling the product versions</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/100-disabling-the-product-versions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/100-disabling-the-product-versions.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 disable a product version  Step by step guide Here are the steps you need to follow to &amp;ldquo;Disabling the product versions&amp;rdquo;
Disable the product version When working with other teams it is recommended that you disable a product version before you delete it. This gives teams time to react before deletion of the product.</description>
    </item>
    
    <item>
      <title>Running yourself</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/30-prerequisites/100-running-yourself.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/30-prerequisites/100-running-yourself.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Enable AWS Config Install the tools Create an IAM Role  In order to run the workshop in your own account you will need to enable AWS Config and create an IAM Role named TeamRole which you must then assume in order to complete the activities.
Step by step guide Here are the steps you need to follow to &amp;ldquo;Running yourself&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Provision the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/200-provision-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/200-provision-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 create a manifest file with our account in it provision the product aws-config-desired-instance-types into our account  Step by step guide Here are the steps you need to follow to provision the control. In the previous task, we created an AWS Service Catalog product but it has not yet been provisioned.
Create a manifest file with our account in it   Navigate to the ServiceCatalogPuppet CodeCommit repository</description>
    </item>
    
    <item>
      <title>Provision the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/200-provision-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/200-provision-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 provision the product aws-config-rds-storage-encrypted  For this workshop, we are using the same account as both the hub and spoke for simplicity; in a multi-account setup, products that are created in a hub account could be provisioned in multiple spoke accounts.
Step by step guide Here are the steps you need to follow to &amp;ldquo;Provision the control&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Add the source code</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/300-add-the-source-code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/300-add-the-source-code.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Add the source code for the version of the AWS Service Catalog product we have just created  Step by step guide Here are the steps you need to follow to &amp;ldquo;Add the source code&amp;rdquo;
Add the source code for your product When you configured your product version, you specified the following:
 Versions: - Name: &amp;#34;v1&amp;#34; Description: &amp;#34;v1 of aws-config-enable-config&amp;#34; Active: True Source: Provider: &amp;#34;CodeCommit&amp;#34; Configuration: RepositoryName: &amp;#34;aws-config-enable-config&amp;#34; BranchName: &amp;#34;main&amp;#34;   We now need to create the AWS CodeCommit repository and add the AWS CloudFormation template we are going to use for our product into that repository.</description>
    </item>
    
    <item>
      <title>Create the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/300-create-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/300-create-the-product.html</guid>
      <description>What are we going to do? We have provisioned a detective control to look for AWS RDS Instances that have don&#39;t have encryption enabled. We can do better, and create an AWS Service Catalog product that meets the encryption requirement by default using service catalog tools. When users create a new RDS instance using this product, encryption at rest is enabled by default and no further configuration is required.</description>
    </item>
    
    <item>
      <title>Deleting the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/300-deleting-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/300-deleting-the-product.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 delete a product version delete a product  Step by step guide Here are the steps you need to follow to &amp;ldquo;Deleting the product&amp;rdquo;
Delete a product version When you are ready to delete a product version you will need to edit its definition in the portfolio yaml.
  Navigate to the ServiceCatalogFactory CodeCommit repository</description>
    </item>
    
    <item>
      <title>Creating CodeStar pipelines</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/305-creating-codestar-pipelines.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/305-creating-codestar-pipelines.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 How to use AWS CodeStar Connections as a source for your pipelines (for Github.com/Github Enterprise and BitBucket Cloud)  Step by step guide Here are the steps you need to follow to &amp;ldquo;Creating CodeStar pipelines&amp;rdquo;
Add the source code for your product When you configured your product version, you may have specified the following:</description>
    </item>
    
    <item>
      <title>Creating S3 pipelines</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/310-creating-s3-pipelines.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/310-creating-s3-pipelines.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 How to use S3 as a source for your pipelines  Step by step guide Here are the steps you need to follow to &amp;ldquo;Creating S3 pipelines&amp;rdquo;
Add the source code for your product When you configured your product version, you may have specified the following:
 Versions: - Name: &amp;#34;v1&amp;#34; Description: &amp;#34;v1 of aws-config-enable-config&amp;#34; Source: Provider: &amp;#34;CodeCommit&amp;#34; Configuration: RepositoryName: &amp;#34;aws-config-enable-config&amp;#34; BranchName: &amp;#34;v1&amp;#34;   This would have taken your products source code from CodeCommit.</description>
    </item>
    
    <item>
      <title>Adding Accounts using Organizational Units (OU)</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/360-aws-organizations-integration/361-adding-accounts-in-ou.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/360-aws-organizations-integration/361-adding-accounts-in-ou.html</guid>
      <description>What are we going to do? This tutorial will walk you through &amp;ldquo;Adding Accounts using Organizational Units (OU)&amp;quot;.
We are going to perform the following steps:
 create a manifest file add accounts to the manifest file using AWS Organizations OU add a spoke-local-portfolios to the manifest file  During this process you will check your progress by verifying what the framework is doing at each step.
Step by step guide Here are the steps you need to follow to &amp;ldquo;Adding Accounts using Organizational Units (OU)&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Sharing a portfolio using AWS Organizations</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/360-aws-organizations-integration/362-sharing-a-portfolio-organizations.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/360-aws-organizations-integration/362-sharing-a-portfolio-organizations.html</guid>
      <description>What are we going to do? This tutorial will walk you through &amp;ldquo;Sharing a portfolio using AWS Organizations&amp;rdquo; to OU member accounts.
Doing this will allow the framework to share Service Catalog Portfolios by using AWS Organizations OUs, rather than account-to-account sharing. This will reduce the time required to share Portfolios.
We are going to perform the following steps:
 enable organizational sharing create a manifest file add an account to the manifest file add a spoke-local-portfolios to the manifest file  During this process you will check your progress by verifying what the framework is doing at each step.</description>
    </item>
    
  </channel>
</rss>